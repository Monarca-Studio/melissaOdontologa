---
import { Image } from "astro:assets";
import { carrouselImages1 } from "~/content/generalDataInformation";
---

<section class="relative mx-5 md:mx-20 mt-12 overflow-hidden">
  <!-- Carrusel para Mobile -->
  <div class="block md:hidden relative">
    <!-- Left Arrow -->
    <button class="absolute left-0 top-1/2 transform -translate-y-1/2 bg-gold text-white p-2 rounded-full z-10 hover:bg-yellow-500 transition" id="prev">
      &#10094;
    </button>

    <!-- Carousel Container -->
    <div class="flex transition-transform ease-in-out duration-500" id="carousel-container">
      <!-- Carousel Images -->
      {
        carrouselImages1.map((item, index) => (
          <div class="flex-shrink-0 w-full" key={index}>
            <Image class="w-full h-full object-cover rounded-md shadow-lg" src={item.image} alt={item.alt} />
          </div>
        ))
      }
    </div>

    <!-- Right Arrow -->
    <button class="absolute right-0 top-1/2 transform -translate-y-1/2 bg-gold text-white p-2 rounded-full z-10 hover:bg-yellow-500 transition" id="next">
      &#10095;
    </button>
  </div>

  <!-- Grid para Desktop -->
  <div class="hidden md:grid grid-cols-4 gap-4">
    {
      carrouselImages1.slice(0, 4).map((item, index) => (
        <div class="w-full" key={index}>
          <Image class="w-full h-full object-cover rounded-md shadow-lg" src={item.image} alt={item.alt} />
        </div>
      ))
    }
  </div>
  <div class="hidden md:grid grid-cols-3 gap-4 mt-4">
    {
      carrouselImages1.slice(4, 7).map((item, index) => (
        <div class="w-full" key={index}>
          <Image class="w-full h-full object-cover rounded-md shadow-lg" src={item.image} alt={item.alt} />
        </div>
      ))
    }
  </div>
</section>

<script>
  const container = document.getElementById('carousel-container');
  let currentIndex = 0; // Start from the first image
  const totalItems = container.children.length;
  const itemWidth = container.children[0].offsetWidth; // Get the width of one item

  // Scroll to next item
  function scrollToNext() {
    if (currentIndex < totalItems - 1) {
      currentIndex++;
      container.style.transform = `translateX(-${itemWidth * currentIndex}px)`;
    }
  }

  // Scroll to previous item
  function scrollToPrev() {
    if (currentIndex > 0) {
      currentIndex--;
      container.style.transform = `translateX(-${itemWidth * currentIndex}px)`;
    }
  }

  // Attach event listeners to arrows
  document.getElementById('next').addEventListener('click', scrollToNext);
  document.getElementById('prev').addEventListener('click', scrollToPrev);

  // Resize observer to handle responsiveness
  window.addEventListener('resize', () => {
    container.style.transition = 'none'; // Disable transition temporarily
    const itemWidth = container.children[0].offsetWidth;
    container.style.transform = `translateX(-${itemWidth * currentIndex}px)`;
    setTimeout(() => container.style.transition = 'transform 0.5s ease-in-out', 100);
  });
</script>

<style>
  /* Carousel container adjustments */
  #carousel-container {
    display: flex;
    gap: 20px;
    transition: transform 0.5s ease-in-out;
  }

  /* Make the buttons more prominent and centered */
  button {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 40px;
    width: 40px;
  }
</style>